# -*- coding: utf-8 -*-
"""Exp_5 (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p4B1z5spuiykwUQx4p6QOI5Cf1JSeaWS

Aim: Program to implement k-NN classification using any standard dataset
available in the public domain and find the accuracy of the algorithm

Algorithm: 

The class of an unknown instance is computed using the following steps:

1. The distance between the unknown instance and all other training instances is computed.
2. The k nearest neighbors are identified.
3. The class labels of the k nearest neighbors are used to determine the class label of the unknown instance by using techniques like majority voting.
"""

from sklearn import neighbors, datasets, preprocessing
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix

iris = datasets.load_iris() 
X, y = iris.data[:, :], iris.target
Xtrain, Xtest, y_train, y_test = train_test_split(X, y, stratify = y, random_state = 0, train_size = 0.7)

scaler = preprocessing.StandardScaler().fit(Xtrain)
Xtrain = scaler.transform(Xtrain)
Xtest = scaler.transform(Xtest)

scores = []
k_range = range(1,15)
for k in k_range:

  knn = neighbors.KNeighborsClassifier(n_neighbors=k)
  knn.fit(Xtrain, y_train)
  y_pred = knn.predict(Xtest)
  scores.append(accuracy_score(y_test, y_pred))
 # print("When  k = %s, accuracy is %s"%(k,accuracy_score(y_test, y_pred)))

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt

# allow plots to appear within the notebook
# %matplotlib inline

# plot the relationship between K and testing accuracy
# plt.plot(x_axis, y_axis)
plt.plot(k_range, scores)
plt.xlabel('Value of K for KNN')
plt.ylabel('Testing Accuracy')